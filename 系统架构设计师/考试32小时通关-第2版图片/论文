论基于架构的软件设计方法（ABSD）及应用
基于架构的软件设计（Architecture-Based Software Design, ABSD）方法以构成软件架构的商业、质量和功能需求等要素来驱动整个软件开发过程。ABSD
是一个自顶向下，递归细化的软件开发方法，它以软件系统功能的分解为基础，通过选择架构风格实现质量和商业需求，并强调在架构设计过程中使用软件架构模板。
采用ABSD方法，设计活动可以从项目总体功能框架明确后就开始，因此该方法特别适用于开发一些不能预先决定所有需求的软件系统，如软件产品线系统或长生命周期
系统等，也可为需求不能在短时间内明确的软件项目提供指导。
请围绕“基于架构的软件开发方法及应用”论题，依次从以下三个方面进行论述。
1. 概要叙述你参与开发的、采用ABSD方法的软件项目以及你在其中所承担的主要工作。
2. 结合项目实际，详细说明采用ABSD方法进行软件开发时，需要经历哪些开发阶段？每个阶段包括哪些主要活动？
3. 阐述你在软件开发的过程中都遇到了哪些实际问题及解决方法。


基于架构的软件开发方法及应用

摘要

我有幸担任KIAM统一用户身份管控系统的项目经理，来参与项目的主要构建和设计指导工作。项目背景在2023年我公司开始整体战略布局统一数据领域项目开发，旨在为各大集团企业，解决前期信息化创建多个项目之间业务管理维护困难的问题。
耗时一年，开发人员50人，产品6人，测试5人以及项目经理4人。最终在某集团商网搭建出50台高性能机器(5台认证服务器，数据服务器采用集团内部的专用数据库服务器，3管理端服务器，以及大数据集群包含Cloud Manager
基础集群40台左右，以及各种堡垒机)来实现数据存储融合，各应用系统集成之后，平稳运行，提升客户管理效率，数据统一融合治理。获得了用户的一致性好评。

正文

KIAM统一用户身份管控系统，核心领域分为4大块，统一用户、统一资源、统一审计、统一授权。项目处于整个集团系统战略规划的核心地位，所以对于项目的质量、易用性、可维护性、安全性都有比较高的要求，并且会存在大量定制化数据数据导入导出交换的
情况存在，因此为了保证项目整体战略的目标明确，我们采取了ABSD开发方法来作为项目整体方案把控的方法，从顶层设计的话项目是一个统一的整体，共同协作完成整个项目的功能目标，但是多个在实现的情况下存在接口请求量差异比较大的情况下，因此我们进行服务的拆分。以满足不同的目标和需求。
以及多个小组共同开发，以实现项目最终的目标。
子项目选型：在针对于不同地方的项目会存在很大差异的定制化开发，项目早期是使用git的不同分支进行管理，但是在后期开发过程中，发现一个bug可能会在不同分
支扩散，需要修复多次，同时在项目测试和维护过程中也存在很多的问题，严重影响了后续的开发进度
因此选择在开发基础应用的时候我们采用了低代码的思想，使用内置的数据库CMDB存储页面的结构数据，前段使用vue进行展示，针对于业务系统进行定制化在内置系
统中进行配置化添加字段初始化数据，配置对应处理函数以及依赖事件，以及对应的自定义处理函数来实现。
统一用户，进行多系统数据整合，比如从oa，登录，ca等系统进行数据的接入，同时系统内部集成公司的CARA，实现发证逻辑，数据的融合，比如多数据源融合的时候，
定义唯一标识，比如手机号身份证号码等。统一用户数据为基础之后，可以进行用户的统一登录和管理功能，不需要系统使用人员在多个系统之间进行切换操作
统一登录，我们是基于CAS进行二次开发，进行统一的登录拦截器，颁发临时token，换取长时间的票据来进行实现。对外提供多种接入支持，比如php、.net和java
依赖的jar来进行实现。统一的拦截到登录门户进行登录，完成后回跳原来系统来进行验证票据获取用户信息。
多个系统之间的数据我们也进行的多种方式的输入和输出，一般情况下在系统上线的时候需要将原始系统数据进行导入，方式支持Excel、数据库、接口自定义等方式，
同时也配置了开关，多线程处理来加速数据的导入。对外的app 提供授权机制，进行应用申请，颁发appId和appSec来验证来源应用的可靠性
同时对系统菜单进行资源的划分，功能菜单，数据列都可以进行不同维度的授权，统一审计的主要是基于安全网关的日志来进行实现的，基于Flume采集日志信息，
进行解析数据转换，经过kafka进行削峰和异步，然后使用flink和HDFS+Hive分别进行实时消息处理和离线业务数据存储和分析，最后进行数据融合和风险事件告警的方式来进行审计追踪告警、。
整体过程我们主要经历了以下几个阶段：需求的收集整理，在我们的整体战略方向确定之后就开始着手，主要通过的途径包含与之前开拓出来的用户面谈，问卷调查以及部门内部的头脑风暴。
然后对于这些需求进行归类拆分，优先级划分，具体功能需求和性能要求。产出需求规格说明书，后面对部门内人员的技术栈，兴趣发展方向进行分析和了解，进行开发小组划分，不同小组进行需求的整理采集，产出技术方案，产品根据需求进行交互流程拆分，产出原型，拿到原型之后，给开发内部讲解，多次评审之后，
邀请外部的最终用户来进行参与设计优化，然后在进行原型的完善。同时基础建设小组要先基于CMDB进行可行性功能性等研究，给出基础方案，大数据基础建设小组调研相关组件，大数据相关知识，可能遇见的问题，基础流程的打通
业务小组基于基础建设板块配置搭建，认证小组进行CAS的多种认证方式的开发，以及项目认证账户体系的构件，CA/RA接入，开发小组每周汇报自己的进度，遇见问题和卡点。非必要和复杂的设计是否可以进行延后迭代开发。基础代码实现之后，
开始进行联调测试，以及各项指标的研究，比如登录接口的并发，数据导入导出性能，日志审计性能，Redis中间件的接入，优化查询性能，安全扫描，保证系统的安全性，用户密码的加密存储，敏感信息的脱敏等一些列组合实现，同时在开发过程中，不同的小组采用的架构是不一样的，多个服务基于
spring cloud的服务注册发现，Nginx代理，双机热备提升系统的可靠性，同时对于一些接口进行限流防止数据库被打穿。
最后我们进行交互应用服务的部署，给用户提供了很大的便利，用户维护的效率提高百分之60以上，日志分析发现异常流量和域外访问告警邮件短息，时长不高于3s。同时对于核心应用的聚合和集成打下了良好的基础，为后续，其他资源的整合提供了良好的样例。也积累了宝贵的经验。在我们大基于HDFS+Hive以及原始的MapReduce计算引擎切换Spark计算引擎，数据离线计算原始的的半小时加速到分钟级别。
以及目前数据仓库已经构建后续我们可以基于数据进行数据分析，聚类标签，等给用户贴上习惯标签，在后续有异常行为的时候能及时发现和补救。